package main

import (
	"fmt"
	"strings"
)

// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Character –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏
type Character struct {
	X int
	Y int
}

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
func NewCharacter(StartX int, StartY int) Character {
	return Character{X: StartX, Y: StartY}
}

// –†–∏—Å—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
func (ctx *Character) PrintBoard() {
	for y := 0; y < 8; y++ {
		for x := 0; x < 8; x++ {
			if ctx.X == x && ctx.Y == y {
				fmt.Print("üîµ")
			} else {
				fmt.Print("‚¨ú")
			}
		}
		fmt.Println()
	}
}

func (ctx *Character) MoveUp() {
	if ctx.Y > 0 {
		ctx.Y--
	} else {
		fmt.Println("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–≤–µ—Ä—Ö")
	}
}

func (ctx *Character) MoveDown() {
	if ctx.Y < 7 {
		ctx.Y++
	} else {
		fmt.Println("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–Ω–∏–∑")
	}
}

func (ctx *Character) MoveLeft() {
	if ctx.X > 0 {
		ctx.X--
	} else {
		fmt.Println("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ª–µ–≤–æ")
	}
}
func (ctx *Character) MoveRight() {
	if ctx.X < 7 {
		ctx.X++
	} else {
		fmt.Println("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ")
	}
}

func main() {
	fmt.Println("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\t–í–≤–µ—Ä—Ö\n\t–í–Ω–∏–∑\n\t–í–ø—Ä–∞–≤–æ\n\t–í–ª–µ–≤–æ\n\t–°—Ç–æ–ø")

	var X, Y int
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ X: ")
	fmt.Scan(&X)
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ X: ")
	fmt.Scan(&Y)

	char := NewCharacter(X, Y)

	if X < 0 || X >= 8 || Y < 0 || Y >= 8 {
		fmt.Println("–ü–æ–ª–µ –Ω–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–µ")
		return
	}

	var Command string

	char.PrintBoard()

	for {
		fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
		fmt.Scan(&Command)

		Commands := strings.ToLower(Command)

		if Commands == "–≤–≤–µ—Ä—Ö" {
			char.MoveUp()
		} else if Commands == "–≤–Ω–∏–∑" {
			char.MoveDown()
		} else if Commands == "–≤–ø—Ä–∞–≤–æ" {
			char.MoveRight()
		} else if Commands == "–≤–ª–µ–≤–æ" {
			char.MoveLeft()
		} else if Commands == "—Å—Ç–æ–ø" {
			fmt.Println("–ö–æ–Ω–µ—Ü –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã")
			return
		}

		char.PrintBoard()
	}
}
